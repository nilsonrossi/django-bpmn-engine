"""
Django settings for django_bpmn_engine project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os

from distutils.util import strtobool
from logging import Formatter
from pathlib import Path

from pythonjsonlogger.jsonlogger import JsonFormatter

from django_bpmn_engine.core.apps import CoreConfig
from django_bpmn_engine.core.utils import getenv_or_raise_exception

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-&huv7y758bzld4(_ap)dz@7dja*6r&vyxdgacp7ok4whq@yx1("

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = strtobool(os.getenv("DJANGO_DEBUG", "False"))

# CORS
DJANGO_ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS")

if DJANGO_ALLOWED_HOSTS:
    ALLOWED_HOSTS = DJANGO_ALLOWED_HOSTS.split(",")
else:
    ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    # "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "django_celery_beat",
    "django_celery_results",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_spectacular",
    "cacheops",
    "django_jsonform",
    CoreConfig.name,
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "django_bpmn_engine.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "django_bpmn_engine.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

# Database
DATABASES = {
    "default": {
        "ENGINE": getenv_or_raise_exception("DB_ENGINE"),
        "NAME": getenv_or_raise_exception("DB_DATABASE"),
        "USER": getenv_or_raise_exception("DB_USER"),
        "HOST": getenv_or_raise_exception("DB_HOST"),
        "PORT": getenv_or_raise_exception("DB_PORT"),
        "PASSWORD": getenv_or_raise_exception("DB_PASSWORD"),
    }
}

DATABASES["default"]["CONN_MAX_AGE"] = int(os.getenv("DB_CONN_MAX_AGE", 0))  # type: ignore


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://redis:6379",
    }
}

REDIS_PASSWORD = os.getenv("REDIS_PASSWORD")
CACHEOPS_REDIS = f"redis://:{REDIS_PASSWORD}@redis:6379/2"
CACHEOPS = {
    "core.servicetaskevent": {"ops": {"fetch", "get"}, "timeout": 60 * 10},
    "core.messagetaskevent": {"ops": {"fetch", "get"}, "timeout": 60 * 10},
    "django_celery_beat.intervalschedule": {
        "ops": {"fetch", "get"},
        "timeout": 60 * 10,
    },
    "django_celery_beat.periodictask": {"ops": {"fetch", "get"}, "timeout": 60 * 10},
    "*.*": {"timeout": 60 * 10},
}


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/static/"

# Logs

ROOT_LOG_LEVEL = os.getenv("ROOT_LOG_LEVEL", "INFO")
PROJECT_LOG_LEVEL = os.getenv("PROJECT_LOG_LEVEL", "INFO")
DJANGO_LOG_LEVEL = os.getenv("DJANGO_LOG_LEVEL", "INFO")
DJANGO_REQUEST_LOG_LEVEL = os.getenv("DJANGO_REQUEST_LOG_LEVEL", "INFO")
DJANGO_DB_BACKENDS_LOG_LEVEL = os.getenv("DJANGO_DB_BACKENDS_LOG_LEVEL", "INFO")
STOMP_LOG_LEVEL = os.getenv("STOMP_LOG_LEVEL", "WARNING")

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "standard": {
            "()": JsonFormatter,
            "format": "%(levelname)-8s [%(asctime)s] [%(request_id)s] %(name)s: %(message)s",
        },
        "development": {
            "()": Formatter,
            "format": "%(asctime)s - level=%(levelname)s - %(name)s - %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "filters": [],
            "formatter": os.getenv("LOG_FORMATTER", "standard"),
        }
    },
    "loggers": {
        "": {"level": os.getenv("ROOT_LOG_LEVEL", "INFO"), "handlers": ["console"]},
        "django": {
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
            "handlers": ["console"],
        },
        "django.request": {
            "level": os.getenv("DJANGO_REQUEST_LOG_LEVEL", "INFO"),
            "handlers": ["console"],
            "propagate": False,
        },
        "django.db.backends": {
            "level": os.getenv("DJANGO_DB_BACKENDS_LOG_LEVEL", "INFO"),
            "propagate": False,
            "handlers": ["console"],
        },
        "stomp.py": {
            "level": os.getenv("STOMP_LOG_LEVEL", "WARNING"),
            "handlers": ["console"],
            "propagate": False,
        },
    },
}

# swagger
SPECTACULAR_SETTINGS = {
    "TITLE": "BPMN Engine - API",
}

# Django Rest Framework
REGEX_DEFAULT_PATTERN = "[(0-9a-zA-Z).-]+"
REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "django_bpmn_engine.support.utils.default_exception_handler",
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Celery Configuration Options
CELERY_BROKER_URL = "amqp://guest:guest@rabbitmq:5672/"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "America/Sao_Paulo"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_CACHE_BACKEND = "default"
CELERY_RESULT_BACKEND = "django-db"
